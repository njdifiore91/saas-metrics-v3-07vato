name: Staging Deployment

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  TF_WORKSPACE: staging
  NODE_VERSION: '20.x'
  DEPLOY_TIMEOUT: '300' # 5 minutes rollback timeout
  HEALTH_CHECK_RETRIES: '3'
  TRAFFIC_SHIFT_INTERVAL: '30'

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.startupmetrics.com
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.x"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ./infrastructure

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan \
            -var="environment=staging" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="domain_name=staging.startupmetrics.com"
        working-directory: ./infrastructure

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure

  deploy-services:
    name: Deploy Services
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download Backend Artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-artifacts
          path: backend-dist

      - name: Deploy Blue Environment
        id: deploy-blue
        run: |
          # Update task definitions with new image tags
          aws ecs update-service \
            --cluster staging-cluster \
            --service metrics-service-blue \
            --force-new-deployment \
            --desired-count 2

          # Wait for service stability
          aws ecs wait services-stable \
            --cluster staging-cluster \
            --services metrics-service-blue

      - name: Health Check Blue
        id: health-blue
        run: |
          endpoint="https://staging-blue.startupmetrics.com/health"
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            if curl -s -f "$endpoint"; then
              echo "::set-output name=status::success"
              exit 0
            fi
            sleep 10
          done
          echo "::set-output name=status::failure"
          exit 1

      - name: Traffic Shift
        if: steps.health-blue.outputs.status == 'success'
        run: |
          # Gradually shift traffic using ALB rules
          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions '[{"Type":"forward","ForwardConfig":{"TargetGroups":[{"TargetGroupArn":"${{ secrets.BLUE_TARGET_GROUP_ARN }}","Weight":100}]}}]'

      - name: Rollback on Failure
        if: failure()
        run: |
          aws ecs update-service \
            --cluster staging-cluster \
            --service metrics-service-green \
            --force-new-deployment

          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions '[{"Type":"forward","ForwardConfig":{"TargetGroups":[{"TargetGroupArn":"${{ secrets.GREEN_TARGET_GROUP_ARN }}","Weight":100}]}}]'

  deploy-frontend:
    name: Deploy Frontend
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Frontend Build
        uses: actions/download-artifact@v3
        with:
          name: production-build
          path: dist

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ secrets.STAGING_FRONTEND_BUCKET }} \
            --delete \
            --cache-control "public,max-age=31536000,immutable"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  post-deployment:
    name: Post-Deployment Validation
    needs: [deploy-services, deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
      - name: Run E2E Tests
        uses: cypress-io/github-action@v5
        with:
          config-file: cypress.config.ts
          config: baseUrl=https://staging.startupmetrics.com
          browser: chrome
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Monitor Metrics
        run: |
          # Check CloudWatch metrics for deployment success
          aws cloudwatch get-metric-statistics \
            --namespace AWS/ApplicationELB \
            --metric-name HTTPCode_Target_5XX_Count \
            --dimensions Name=LoadBalancer,Value=${{ secrets.ALB_NAME }} \
            --start-time $(date -u -v-5M '+%Y-%m-%dT%H:%M:%SZ') \
            --end-time $(date -u '+%Y-%m-%dT%H:%M:%SZ') \
            --period 300 \
            --statistics Sum

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}